all_stab <- bind_cols(temp_stab,
precip_stab %>% dplyr::select(contains("stability")),
overall_stab %>% dplyr::select(contains("stability"))) %>%
pivot_longer(cols = contains("stability"), names_to = "metric", values_to = "stability") %>%
mutate(metric = str_remove(metric, "_stability_scaled"),
genus_sp = str_replace(genus_sp, "_", " ") %>% str_to_sentence(),
reproductive_mode = str_to_sentence(reproductive_mode)) %>%
mutate(metric = case_when(
metric == "overall" ~ "Overall",
metric == "temp" ~ "Temperature",
metric == "precip" ~ "Precipitation"
))
stab_box <- ggplot(data = all_stab, aes(x = metric, y = stability, fill = reproductive_mode)) +
geom_boxplot() +
scale_fill_manual(values = c("transparent", "darkgrey")) +
labs(y = "Scaled Stability", fill = "Reproductive mode") +
facet_wrap(~ genus_sp) +
theme_few() +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 12),
strip.background = element_rect(fill = "lightgrey", color = "black"),
strip.text = element_text(size = 12, face = "bold.italic"),
panel.grid.major.y = element_line( size=.1, color="gray" ),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 16))
pdf(file = here("output", "manuscript_figs", "stability.pdf"),
width = 9,
height= 7)
stab_box
dev.off()
stab_box
# counts per species per reproductive mode
paste0("Sample size per species per reproductive mode.")
all_stab %>%
group_by(genus_sp, reproductive_mode) %>%
tally()
# df is all_stab or all_seasonality , genus_species is formatted "Genus species", metric is "Temperature", "Precipitation", or "Overall", scale is "stability" or "seasonality
check_assumptions <- function(df, genus_species, metric, scale = "stability") {
stab <- df %>%
filter(genus_sp == genus_species, metric == metric)
asexual <- stab %>%
filter(reproductive_mode == "Asexual") %>%
dplyr::select(scale) %>%
as_vector()
sexual <- stab %>%
filter(reproductive_mode == "Sexual") %>%
dplyr::select(scale) %>%
as_vector()
# # shapiro wilk test for normality for both reproductive modes
shapiro_asexual <-
shapiro.test(asexual) %>%
broom::tidy() %>%
dplyr::select(p.value, method) %>%
mutate(genus_sp = genus_species,
reproductive_mode = "Asexual",
metric = metric)
shapiro_sexual <-
shapiro.test(sexual) %>%
broom::tidy() %>%
dplyr::select(p.value, method) %>%
mutate(genus_sp = genus_species,
reproductive_mode = "Sexual",
metric = metric)
var_df <- var.test(asexual, sexual) %>%
broom::tidy() %>%
dplyr::select(p.value,
method) %>%
mutate(genus_sp = genus_species,
reproductive_mode = "Both",
metric = metric)
all_tests <- bind_rows(shapiro_asexual,
shapiro_sexual,
var_df)
all_tests
}
temp_assumptions_stab <-
map_df(
unique(all_stab$genus_sp),
~ check_assumptions(
df = all_stab,
genus_species = .x,
metric = "Temperature",
scale = "stability"
)
)
precip_assumptions_stab <-
map_df(
unique(all_stab$genus_sp),
~ check_assumptions(
df = all_stab,
genus_species = .x,
metric = "Precipitation",
scale = "stability"
)
)
overall_assumptions_stab <-
map_df(
unique(all_stab$genus_sp),
~ check_assumptions(
df = all_stab,
genus_species = .x,
metric = "Overall",
scale = "stability"
)
)
all_assumptions_stab <-
bind_rows(temp_assumptions_stab,
precip_assumptions_stab,
overall_assumptions_stab)
# see which assumptions are violated
paste0("Assumptions test. Too many are violated- going to go with a Welch's t-test. Sampling is uneven anyways.")
all_assumptions_stab %>%
filter(p.value < 0.05)
# Since most species have unequal sample sizes and have at least one assumption violated, I'm going to use Welch's t-tests
run_ttests_stability <- function(df, genus_species, metric) {
scale_df <- df %>%
filter(genus_sp == genus_species,
metric == metric)
test <- t.test(stability ~ reproductive_mode,
data = scale_df,
var.equal = FALSE) %>%
broom::tidy() %>%
mutate(genus_sp = genus_species,
metric = metric)
test
}
temp_ttests_stab <- map_df(
unique(all_stab$genus_sp),
~ run_ttests_stability(
df = all_stab,
genus_species = .x,
metric = "Temperature"
)
)
precip_ttests_stab <- map_df(
unique(all_stab$genus_sp),
~ run_ttests_stability(
df = all_stab,
genus_species = .x,
metric = "Precipitation"
)
)
overall_ttests_stab <- map_df(
unique(all_stab$genus_sp),
~ run_ttests_stability(
df = all_stab,
genus_species = .x,
metric = "Overall"
)
)
all_ttests_stab <- bind_rows(temp_ttests_stab,
precip_ttests_stab,
overall_ttests_stab)
all_ttests_stab %>%
filter(p.value < 0.05) %>%
dplyr::select(Species = genus_sp, Metric = metric, Estimate = estimate, Statistic = statistic, Pvalue = p.value) %>%
group_by(Species) %>%
gt() %>%
tab_header(title = "Welch's two sample t-tests comparing occupied stability between reproductive modes") %>%
tab_footnote(footnote = "Direction of the estimate and statistic indicate the difference in stability from sexual to asexual reproductive modes.", locations = cells_column_labels(
columns = vars(Estimate, Statistic))) %>%
fmt_number(columns = vars(Estimate, Statistic, Pvalue),
decimals = 3) %>%
tab_style(style = list(cell_text(style = "italic"),
cell_text(weight = "bold")),
locations = cells_row_groups())
all_ttests_stab %>% filter(p.value < 0.05)
all_ttests_stab %>% filter(p.value < 0.05) %>% dplyr::select(Species = genus_sp, Metric = metric, Estimate = estimate, Statistic = statistic, Pvalue = p.value) %>%
group_by(Species)
all_ttests_stab %>% filter(p.value < 0.05) %>% dplyr::select(Species = genus_sp, Metric = metric, Estimate = estimate, Statistic = statistic, Pvalue = p.value)
head(all_stab)
temp_ttests_stab
glimpse(temp_ttests_stab)
View(temp_ttests_stab)
View(precip_ttests_stab)
precip_ttests_stab <- map_df(
unique(all_stab$genus_sp),
~ run_ttests_stability(
df = all_stab,
genus_species = .x,
metric = "Precipitation"
)
)
View(precip_ttests_stab)
unique(all_ttests_stab$metric)
temp_ttests_stab
precip_ttests_stab
overall_ttests_stab
run_ttests_stability(df = all_stab, genus_species = all_stab$genus_sp[1], metric = "Temperature")
run_ttests_stability(df = all_stab, genus_species = all_stab$genus_sp[1], metric = "Precipitation")
mean(all_stab %>% filter(genus_sp == all_stab$genus_sp[1], metric == "Precipitation") %>% pull(stability))
all_stab %>% filter(genus_sp == all_stab$genus_sp[1], metric == "Precipitation") %>% pull(stability)
?mean
all_stab %>% filter(genus_sp == all_stab$genus_sp[1], metric == "Precipitation") %>% pull(stability) %>% mean(na.rm = TRUE)
all_stab %>% filter(genus_sp == all_stab$genus_sp[1], metric == "Temperature") %>% pull(stability) %>% mean(na.rm = TRUE)
run_ttests_stability <- function(df, genus_species, met) {
scale_df <- df %>%
filter(genus_sp == genus_species,
metric == met)
test <- t.test(stability ~ reproductive_mode,
data = scale_df,
var.equal = FALSE) %>%
broom::tidy() %>%
mutate(genus_sp = genus_species,
metric = met)
test
}
temp_ttests_stab <- map_df(
unique(all_stab$genus_sp),
~ run_ttests_stability(
df = all_stab,
genus_species = .x,
met = "Temperature"
)
)
precip_ttests_stab <- map_df(
unique(all_stab$genus_sp),
~ run_ttests_stability(
df = all_stab,
genus_species = .x,
met = "Precipitation"
)
)
overall_ttests_stab <- map_df(
unique(all_stab$genus_sp),
~ run_ttests_stability(
df = all_stab,
genus_species = .x,
met = "Overall"
)
)
all_ttests_stab <- bind_rows(temp_ttests_stab,
precip_ttests_stab,
overall_ttests_stab)
all_ttests_stab %>% filter(p.value < 0.05) %>% dplyr::select(Species = genus_sp, Metric = metric, Estimate = estimate, Statistic = statistic, Pvalue = p.value)
all_ttests_stab %>%
filter(p.value < 0.05) %>%
dplyr::select(Species = genus_sp, Metric = metric, Estimate = estimate, Statistic = statistic, Pvalue = p.value) %>%
group_by(Species) %>%
gt() %>%
tab_header(title = "Welch's two sample t-tests comparing occupied stability between reproductive modes") %>%
tab_footnote(footnote = "Direction of the estimate and statistic indicate the difference in stability from sexual to asexual reproductive modes.", locations = cells_column_labels(
columns = vars(Estimate, Statistic))) %>%
fmt_number(columns = vars(Estimate, Statistic, Pvalue),
decimals = 3) %>%
tab_style(style = list(cell_text(style = "italic"),
cell_text(weight = "bold")),
locations = cells_row_groups())
# get files to read in for each metric (temperature, precipitation, overall)
temp_seasonality_list <-
dir_ls(spread_path, glob = "*temp_seasonality_df.csv",
recurse = TRUE)
precip_seasonality_list <-
dir_ls(spread_path, glob = "*precip_seasonality_df.csv",
recurse = TRUE)
overall_seasonality_list <-
dir_ls(spread_path, glob = "*overall_seasonality_df.csv",
recurse = TRUE)
read_csv_sp_name <- function(file) {
s <- read_csv(file)
genus_sp_file <- str_split(file, pattern = "/") %>% unlist()
genus_sp <- genus_sp_file[length(genus_sp_file) - 1]
mutate(s, genus_sp = genus_sp)
}
# function to z-normalize data
z_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# the NA I'm removing is the same observation for both data sets.
# normalize seasonality data for comparison and add in overall seasonality column.
temp_seasonality <- map(temp_seasonality_list, read_csv_sp_name) %>%
bind_rows() %>%
na.omit() %>%
mutate(temp_seasonality_norm = z_norm(temp_seasonality))
precip_seasonality <- map(precip_seasonality_list, read_csv_sp_name) %>%
bind_rows() %>%
na.omit() %>%
mutate(precip_seasonality_norm = z_norm(precip_seasonality))
overall_seasonality <- tibble(
overall_seasonality_norm = precip_seasonality$precip_seasonality_norm * temp_seasonality$temp_seasonality_norm)
# this assumes all individuals are in the same order. A glance at each data set confirms this, but make sure not to rearrange observation
all_seasonality <- bind_cols(temp_seasonality %>%
dplyr::select(-temp_seasonality),
precip_seasonality %>%
dplyr::select(precip_seasonality_norm),
overall_seasonality %>%
dplyr::select(overall_seasonality_norm)) %>%
pivot_longer(cols = contains("seasonality"),
names_to = "metric",
values_to = "seasonality") %>%
mutate(metric = str_remove(metric, "_seasonality_norm"),
genus_sp = str_replace(genus_sp, "_", " ") %>%
str_to_sentence(),
reproductive_mode = str_to_sentence(reproductive_mode)) %>%
mutate(metric = case_when(
metric == "temp" ~ "Temperature",
metric == "precip" ~ "Precipitation",
metric == "overall" ~ "Overall"
))
seasonality_box <- ggplot(data = all_seasonality, aes(x = metric, y = seasonality, fill = reproductive_mode)) +
geom_boxplot() +
scale_fill_manual(values = c("transparent", "darkgrey")) +
labs(y = "Seasonality", fill = "Reproductive mode") +
facet_wrap(~ genus_sp) +
theme_few() +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 12),
strip.background = element_rect(fill = "lightgrey", color = "black"),
strip.text = element_text(size = 12, face = "bold.italic"),
panel.grid.major.y = element_line( size=.1, color="gray" ),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 16))
pdf(file = here("output", "manuscript_figs", "seasonality.pdf"),
width = 9,
height= 7)
seasonality_box
dev.off()
seasonality_box
# counts per species per reproductive mode
paste0("Sample size per species per reproductive mode.")
all_seasonality %>%
group_by(genus_sp, reproductive_mode) %>%
tally()
temp_assumptions_seasonality <-
map_df(
unique(all_seasonality$genus_sp),
~ check_assumptions(
df = all_seasonality,
genus_species = .x,
metric = "Temperature",
scale = "seasonality"
)
)
precip_assumptions_seasonality <-
map_df(
unique(all_seasonality$genus_sp),
~ check_assumptions(
df = all_seasonality,
genus_species = .x,
metric = "Precipitation",
scale = "seasonality"
)
)
overall_assumptions_seasonality <-
map_df(
unique(all_seasonality$genus_sp),
~ check_assumptions(
df = all_seasonality,
genus_species = .x,
metric = "Overall",
scale = "seasonality"
)
)
all_assumptions_seasonality <-
bind_rows(temp_assumptions_seasonality,
precip_assumptions_seasonality,
overall_assumptions_seasonality)
# see which assumptions are violated
paste0("Assumptions test. Too many are violated- going to go with a Welch's t-test. Sampling is uneven anyways.")
all_assumptions_seasonality %>%
filter(p.value < 0.05)
# Since most species have unequal sample sizes and have at least one assumption violated, I'm going to use Welch's t-tests
run_ttests_seasonality <- function(df, genus_species, metric) {
seasonality <- df %>%
filter(genus_sp == genus_species,
metric == metric)
test <- t.test(seasonality ~ reproductive_mode,
data = seasonality,
var.equal = FALSE) %>%
broom::tidy() %>%
mutate(genus_sp = genus_species,
metric = metric)
test
}
temp_ttests_seasonality <- map_df(
unique(all_seasonality$genus_sp),
~ run_ttests_seasonality(
df = all_seasonality,
genus_species = .x,
metric = "Temperature"
)
)
precip_ttests_seasonality <- map_df(
unique(all_seasonality$genus_sp),
~ run_ttests_seasonality(
df = all_seasonality,
genus_species = .x,
metric = "Precipitation"
)
)
overall_ttests_seasonality <- map_df(
unique(all_seasonality$genus_sp),
~ run_ttests_seasonality(
df = all_seasonality,
genus_species = .x,
metric = "Overall"
)
)
all_ttests_seasonality <- bind_rows(temp_ttests_seasonality,
precip_ttests_seasonality,
overall_ttests_seasonality)
all_ttests_seasonality %>%
filter(p.value < 0.05) %>%
dplyr::select(Species = genus_sp, Metric = metric, Estimate = estimate, Statistic = statistic, Pvalue = p.value) %>%
group_by(Species) %>%
gt() %>%
tab_header(title = "Welch's two sample t-tests comparing occupied seasonality between reproductive modes") %>%
tab_footnote(footnote = "Direction of the estimate and statistic indicate the difference in seasonality from sexual to asexual reproductive modes.", locations = cells_column_labels(
columns = vars(Estimate, Statistic))) %>%
fmt_number(columns = vars(Estimate, Statistic, Pvalue),
decimals = 3) %>%
tab_style(style = list(cell_text(style = "italic"),
cell_text(weight = "bold")),
locations = cells_row_groups())
# counts per species per reproductive mode
paste0("Sample size per species per reproductive mode.")
all_seasonality %>%
group_by(genus_sp, reproductive_mode) %>%
tally()
temp_assumptions_seasonality <-
map_df(
unique(all_seasonality$genus_sp),
~ check_assumptions(
df = all_seasonality,
genus_species = .x,
metric = "Temperature",
scale = "seasonality"
)
)
precip_assumptions_seasonality <-
map_df(
unique(all_seasonality$genus_sp),
~ check_assumptions(
df = all_seasonality,
genus_species = .x,
metric = "Precipitation",
scale = "seasonality"
)
)
overall_assumptions_seasonality <-
map_df(
unique(all_seasonality$genus_sp),
~ check_assumptions(
df = all_seasonality,
genus_species = .x,
metric = "Overall",
scale = "seasonality"
)
)
all_assumptions_seasonality <-
bind_rows(temp_assumptions_seasonality,
precip_assumptions_seasonality,
overall_assumptions_seasonality)
# see which assumptions are violated
paste0("Assumptions test. Too many are violated- going to go with a Welch's t-test. Sampling is uneven anyways.")
all_assumptions_seasonality %>%
filter(p.value < 0.05)
# Since most species have unequal sample sizes and have at least one assumption violated, I'm going to use Welch's t-tests
run_ttests_seasonality <- function(df, genus_species, met) {
seasonality <- df %>%
filter(genus_sp == genus_species,
metric == met)
test <- t.test(seasonality ~ reproductive_mode,
data = seasonality,
var.equal = FALSE) %>%
broom::tidy() %>%
mutate(genus_sp = genus_species,
metric = met)
test
}
temp_ttests_seasonality <- map_df(
unique(all_seasonality$genus_sp),
~ run_ttests_seasonality(
df = all_seasonality,
genus_species = .x,
met = "Temperature"
)
)
precip_ttests_seasonality <- map_df(
unique(all_seasonality$genus_sp),
~ run_ttests_seasonality(
df = all_seasonality,
genus_species = .x,
met = "Precipitation"
)
)
overall_ttests_seasonality <- map_df(
unique(all_seasonality$genus_sp),
~ run_ttests_seasonality(
df = all_seasonality,
genus_species = .x,
met = "Overall"
)
)
all_ttests_seasonality <- bind_rows(temp_ttests_seasonality,
precip_ttests_seasonality,
overall_ttests_seasonality)
all_ttests_seasonality %>%
filter(p.value < 0.05) %>%
dplyr::select(Species = genus_sp, Metric = metric, Estimate = estimate, Statistic = statistic, Pvalue = p.value) %>%
group_by(Species) %>%
gt() %>%
tab_header(title = "Welch's two sample t-tests comparing occupied seasonality between reproductive modes") %>%
tab_footnote(footnote = "Direction of the estimate and statistic indicate the difference in seasonality from sexual to asexual reproductive modes.", locations = cells_column_labels(
columns = vars(Estimate, Statistic))) %>%
fmt_number(columns = vars(Estimate, Statistic, Pvalue),
decimals = 3) %>%
tab_style(style = list(cell_text(style = "italic"),
cell_text(weight = "bold")),
locations = cells_row_groups())
