pc.centroid.acornutus <- replicate(1000, pc_centroid_fun(summary.list.spin$loc.clim, "acornutus", 3), simplify = TRUE) %>%
as.data.frame()
names(pc.centroid.acornutus) <- "centroid"
ggplot(pc.centroid.acornutus, aes(x = centroid)) +
geom_histogram(bins = 30) +
#scale_x_sqrt() +
geom_vline(xintercept = pc.centroid.acornutus_sub, color = "red") +
theme_linedraw()
spin_omi <- omi_fun(summary.list.spin$loc.clim, w, use_bg = FALSE)
spin_omi$test_omi
summary.list.tect <- species_pca_fun(loc.clim, "tectarchus")
plot_clim_pca(summary.list.tect$loc.clim, summary.list.tect$summary.pca)
summary.list.tect$summary.pca
loadings.tect <- summary.list.tect$summary.pca$rotation
knitr::kable(round(loadings.tect[,1:3],3)) #Table of loading scores for the first 3 PCs.
all_omi <- omi_fun(loc.clim, w, use_bg = FALSE)
all_omi$test_omi
all_omi$test_omi
source("R/omi_function.R") #source function that conducts an omi analysis
all_omi <- omi_fun(loc.clim, w, use_bg = FALSE)
source("R/omi_function.R") #source function that conducts an omi analysis
all_omi <- omi_fun(loc.clim, w, use_bg = FALSE)
w
r-test <- raster::extract(w, loc.clim)
?raster::extract
class(loc.clim)
loc.clim$latitude
l_try <- loc.clim
coordinates(l_try) <- ~ longitude + latitude
coordinates(l_try)
min(coordinates(l_try)[,1])
min(coordinates(l_try)[,2])
max(coordinates(l_try)[,2])
max(coordinates(l_try)[,1])
mean(coordinates(l_try)[,1])
median(coordinates(l_try)[,1])
source("R/omi_function.R") #source function that conducts an omi analysis
packages <- c("raster", "data.table", "tidyverse", "sf", "RStoolbox", "leaflet", "plotly", "gdata", "BSDA", "ade4", "readxl", "janitor", "rnaturalearth") #RStoolbox has some dependencies like openMP that can be difficult to compile on a Mac (needed for the dependent package "caret"). If you have High Sierra OS or newer, search for instructions specific to your OS- it's a lot easier than older OS's.
lapply(packages, require, character.only = TRUE)
source("R/plot_leaflet_function.R") #source locality plotting function
source("R/plot_climate_pca_function.R") #source pca plotting function
source("R/species_pca_function.R") #source function that computes climate pca per species
source("R/min_convex_poly.R") #source function that creates a minimum convex polygon around points
source("R/pc_centroid_fun.R") #source function for my version of assessing marginal niche hypothesis
source("R/omi_function.R") #source function that conducts an omi analysis
source("R/niche_marginality_test.R")
###read in spreadsheet
loc <- read_xlsx("Original-spreadsheets/all species New_6-14-19.xlsx") %>%
janitor::clean_names() %>%
mutate(reproductive_mode = as.factor(reproductive_mode))
loc
###read in spreadsheet
loc <- read_xlsx("Original-spreadsheets/all species New_6-14-19.xlsx") %>%
janitor::clean_names() %>%
mutate(reproductive_mode = as.factor(reproductive_mode))
#get the number of individuals, and the sexuality counts per species
stick_insects %>%
group_by(genus, species, reproductive_mode) %>%
count() %>%
mutate(genus_species = str_c(genus, species, sep = "_"),
genus_species = str_replace_all(genus_species, " ", "_"),
genus_species = str_replace_all(genus_species, "\\.", "")) %>%
ungroup() %>%
mutate(genus_species = fct_reorder(genus_species, n, sum)) %>%
ggplot(aes(x = genus_species, y = n, fill = reproductive_mode)) +
geom_col() +
coord_flip() +
theme_minimal()
###read in spreadsheet
loc <- read_xlsx("Original-spreadsheets/all species New_6-14-19.xlsx") %>%
janitor::clean_names() %>%
mutate(reproductive_mode = as.factor(reproductive_mode))
#get the number of individuals, and the sexuality counts per species
loc %>%
group_by(genus, species, reproductive_mode) %>%
count() %>%
mutate(genus_species = str_c(genus, species, sep = "_"),
genus_species = str_replace_all(genus_species, " ", "_"),
genus_species = str_replace_all(genus_species, "\\.", "")) %>%
ungroup() %>%
mutate(genus_species = fct_reorder(genus_species, n, sum)) %>%
ggplot(aes(x = genus_species, y = n, fill = reproductive_mode)) +
geom_col() +
coord_flip() +
theme_minimal()
###read in spreadsheet
loc <- read_xlsx("Original-spreadsheets/all species New_6-14-19.xlsx") %>%
janitor::clean_names() %>%
mutate(reproductive_mode = as.factor(reproductive_mode))
#get the number of individuals, and the sexuality counts per species
loc %>%
group_by(genus, species, reproductive_mode) %>%
count() %>%
mutate(genus_species = str_c(genus, species, sep = "_"),
genus_species = str_replace_all(genus_species, " ", "_"),
genus_species = str_replace_all(genus_species, "\\.", "")) %>%
ungroup() %>%
mutate(genus_species = fct_reorder(genus_species, n, sum)) %>%
ggplot(aes(x = genus_species, y = n, fill = reproductive_mode)) +
geom_col() +
coord_flip() +
theme_minimal()
#get the number of individuals, and the sexuality counts per species
loc %>%
group_by(genus, species, reproductive_mode) %>%
count() %>%
mutate(genus_species = str_c(genus, species, sep = "_"),
genus_species = str_replace_all(genus_species, " ", "_"),
genus_species = str_replace_all(genus_species, "\\.", "")) %>%
ungroup() %>%
mutate(genus_species = fct_reorder(genus_species, n, sum)) %>%
ggplot(aes(x = genus_species, y = n, fill = reproductive_mode)) +
geom_col() +
coord_flip() +
theme_minimal()
#make locality shape file and assign WGS coord system
coord.points <- st_as_sf(loc, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
#use sourced plot_locs_leaflet script to plot localities
all_plot <- plot_locs_leaflet(loc, "reproductive_mode")
all_plot
#in case I want to save the map somewhere
#mapview::mapshot(all_plot, url = paste0(getwd(), "/plots/repro_mode_maps/all_species.html"), file = paste0(getwd(), "/plots/repro_mode_plots/all_species.pdf"))
#in case I want to save the map somewhere
mapview::mapshot(all_plot, url = paste0(getwd(), "/plots/repro_mode_maps/all_species.html"), file = paste0(getwd(), "/plots/repro_mode_plots/all_species.pdf"))
#in case I want to save the map somewhere
mapview::mapshot(all_plot, url = paste0("/plots/repro_mode_maps/all_species.html"), file = paste0("/plots/repro_mode_plots/all_species.pdf"))
#in case I want to save the map somewhere
mapview::mapshot(all_plot, url = paste0("/plots/repro_mode_maps/all_species.html"), file = paste0("/plots/repro_mode_plots/all_species.pdf"))
#in case I want to save the map somewhere
mapview::mapshot(all_plot, url = paste0("/plots/repro_mode_maps/all_species.html"))
#in case I want to save the map somewhere
mapview::mapshot(all_plot, url = paste0(getwd(), "/plots/repro_mode_maps/all_species.html"))
getwd()
#in case I want to save the map somewhere
mapview::mapshot(all_plot, url = paste0(getwd(), "/plots/repro_mode_maps/all_species.html"))
?mapview::mapshot
mapview::mapshot(all_plot, url = paste0(getwd(), "/plots/repro_mode_maps/all_species.html"), file = paste0(getwd(), "/plots/repro_mode_plots/all_species.pdf"))
getwd()
all_plot
#in case I want to save the map somewhere
mapview::mapshot(all_plot, url = paste0(getwd(), "/plots/repro_mode_plots/all_species.html"), file = paste0(getwd(), "/plots/repro_mode_plots/all_species.pdf"))
##get chelsa data
#chelsa_folder <- "/Users/connorfrench/Dropbox/Old_Mac/climate-data/chelsa_30s_bio"
#zip_files <- list.files(chelsa_folder, full.names = TRUE)
#using the Unarchiver commandline tools for Mac to unzip the 7zip chelsa layers. Regular unzip() does not work with 7z zipped files
#for (file in zip_files) {
#set temp directory
#  tempd <- tempdir()
#  system(paste("unar", file, "-o", tempd))
#  r <- raster(list.files(tempd, pattern = "*.tif", full.names = TRUE)) %>%
#    crop(extent(166, 179, -48, -34))
#  writeRaster(r, filename = paste0("~/Desktop/", list.files(tempd, pattern = "*.tif")), format = "GTiff")
#  unlink(tempd, recursive = TRUE)
#}
clim_files <- list.files("climate", full.names = TRUE)
w <- stack(clim_files)
#extract data from worldclim for each locality. Making this into a data frame with columns labeled so the row labeling lines up after I remove the NAs.
#extract data from worldclim for each locality.
coords <- data.frame(latitude = loc$longitude, longitude = loc$latitude)
loc.clim <- dplyr::bind_cols(loc, raster::extract(w, coords, method = "simple", df = TRUE)) %>%
drop_na(CHELSA_bio10_1) %>%
dplyr::select(-ID)
#make a matrix of only bioclim values
clim.mat <- loc.clim[,grep("bio", names(loc.clim))] %>% as.matrix()
#run pca on climate variables
clim.pca <- prcomp(clim.mat, scale = TRUE)
summary.pca <- summary(clim.pca) #check out the components
#extract data from worldclim for each locality. Making this into a data frame with columns labeled so the row labeling lines up after I remove the NAs.
#extract data from worldclim for each locality.
coords <- data.frame(latitude = loc$longitude, longitude = loc$latitude)
loc.clim <- dplyr::bind_cols(loc, raster::extract(w, coords, method = "simple", df = TRUE)) %>%
drop_na(CHELSA_bio10_1) %>%
dplyr::select(-ID)
#make a matrix of only bioclim values
clim.mat <- loc.clim[,grep("bio", names(loc.clim))] %>% as.matrix()
#run pca on climate variables
clim.pca <- prcomp(clim.mat, scale = TRUE)
summary.pca <- summary(clim.pca) #check out the components
summary.pca
#add pca results to loc.clim data frame
loc.clim <- data.frame(loc.clim, clim.pca$x)
#use sourced plot_clim_pca function to plot the pca results. args are the data set with species names and PC axis values and the pca summary
all_pca <- plot_clim_pca(loc.clim, summary.pca, factor = "reproductive_mode")
all_pca
#htmlwidgets::saveWidget(all_pca, paste0(getwd(), "/plots/repro_mode_plots/all_species_pca.html"), selfcontained = TRUE)
#use sourced plot_clim_pca function to plot the pca results. args are the data set with species names and PC axis values and the pca summary
all_pca <- plot_clim_pca(loc.clim, summary.pca, factor = "genus")
all_pca
#use sourced plot_clim_pca function to plot the pca results. args are the data set with species names and PC axis values and the pca summary
repro_pca <- plot_clim_pca(loc.clim, summary.pca, factor = "reproductive_mode")
repro_pca
?htmlwidgets::saveWidget
htmlwidgets::saveWidget(all_pca, paste0(getwd(), "/plots/repro_mode_plots/all_species_pca_genus.html"), selfcontained = TRUE)
htmlwidgets::saveWidget(repro_pca, paste0(getwd(), "/plots/repro_mode_plots/all_species_pca_repro.html"), selfcontained = TRUE)
#extract data from worldclim for each locality. Making this into a data frame with columns labeled so the row labeling lines up after I remove the NAs.
#extract data from worldclim for each locality.
coords <- data.frame(latitude = loc$longitude, longitude = loc$latitude)
loc.clim <- dplyr::bind_cols(loc, raster::extract(w, coords, method = "simple", df = TRUE)) %>%
drop_na(CHELSA_bio10_1) %>%
dplyr::select(-ID)
#make a matrix of only bioclim values
clim.mat <- loc.clim[,grep("bio", names(loc.clim))] %>% as.matrix()
#run pca on climate variables
clim.pca <- prcomp(clim.mat, scale = TRUE)
summary.pca <- summary(clim.pca) #check out the components
#plot tables
summary.pca
knitr::kable(round(clim.pca$rotation[,1:3],3)) #Table of loading scores for the first 3 PCs.
#add pca results to loc.clim data frame
loc.clim <- data.frame(loc.clim, clim.pca$x)
#use sourced plot_clim_pca function to plot the pca results. args are the data set with species names and PC axis values and the pca summary
all_pca <- plot_clim_pca(loc.clim, summary.pca, factor = "genus")
all_pca
#use sourced plot_clim_pca function to plot the pca results. args are the data set with species names and PC axis values and the pca summary
repro_pca <- plot_clim_pca(loc.clim, summary.pca, factor = "reproductive_mode")
repro_pca
#save the plot colored by genus
#htmlwidgets::saveWidget(all_pca, paste0(getwd(), "/plots/repro_mode_plots/all_species_pca_genus.html"), selfcontained = TRUE)
#save the plot colored by reproductive mode
#htmlwidgets::saveWidget(repro_pca, paste0(getwd(), "/plots/repro_mode_plots/all_species_pca_repro.html"), selfcontained = TRUE)
#source function to conduct a PCA on individual species
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
#plot
acan_plot <- plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca, "reproductive_mode")
acan_plot
#htmlwidgets::saveWidget(acan_plot, paste0(getwd(), "/plots/repro_mode_plots/acanthoxyla_pca.html"), selfcontained = TRUE)
htmlwidgets::saveWidget(acan_plot, paste0(getwd(), "/plots/repro_mode_plots/acanthoxyla_pca.html"), selfcontained = TRUE)
#source function to conduct a PCA on individual species
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
#plot
acan_plot <- plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca, "reproductive_mode")
acan_plot
#save pca plot
#htmlwidgets::saveWidget(acan_plot, paste0(getwd(), "/plots/repro_mode_plots/acanthoxyla_pca.html"), selfcontained = TRUE)
summary.list.acan$summary.pca
loadings.acan <- summary.list.acan$summary.pca$rotation
knitr::kable(round(loadings.acan[,1:3],3)) #Table of loading scores for the first 3 PCs.
#source function to conduct a PCA on individual species
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
#plot
acan_plot <- plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca, "reproductive_mode")
acan_plot
#save pca plot
#htmlwidgets::saveWidget(acan_plot, paste0(getwd(), "/plots/repro_mode_plots/acanthoxyla_pca.html"), selfcontained = TRUE)
summary.list.acan$summary.pca
loadings.acan <- summary.list.acan$summary.pca$rotation
knitr::kable(round(loadings.acan[,1:3],3)) #Table of loading scores for the first 3 PCs.
#conduct pca
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
#plot
argo_plot <- plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca, factor = "reproductive_mode")
argo_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(argo_plot, paste0(getwd(), "/plots/repro_mode_plots/argosarchus_pca.html"), selfcontained = TRUE)
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(argo_plot, paste0(getwd(), "/plots/repro_mode_plots/argosarchus_pca.html"), selfcontained = TRUE)
source("R/plot_climate_pca_function.R") #source pca plotting function
#conduct pca
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
#plot
argo_plot <- plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca, factor = "reproductive_mode")
argo_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(argo_plot, paste0(getwd(), "/plots/repro_mode_plots/argosarchus_pca.html"), selfcontained = TRUE)
#pca
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
#plot
aste_plot <- plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca, factor = "reproductive_mode")
aste_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(aste_plot, paste0(getwd(), "/plots/repro_mode_plots/asteliaphasma_pca.html"), selfcontained = TRUE)
summary.list.aste$summary.pca
loadings.aste <- summary.list.aste$summary.pca$rotation
knitr::kable(round(loadings.aste[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
clita_plot <- plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca, factor = "reproductive_mode")
clita_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(clita_plot, paste0(getwd(), "/plots/repro_mode_plots/clitarchus_pca.html"), selfcontained = TRUE)
summary.list.clita$summary.pca
loadings.clita <- summary.list.clita$summary.pca$rotation
knitr::kable(round(loadings.clita[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.micra <- species_pca_fun(loc.clim, "micrarchus")
micra_plot <- plot_clim_pca(summary.list.micra$loc.clim, summary.list.micra$summary.pca, factor = "reproductive_mode")
micra_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(micra_plot, paste0(getwd(), "/plots/repro_mode_plots/micrarchus_pca.html"), selfcontained = TRUE)
summary.list.micra$summary.pca
loadings.micra <- summary.list.micra$summary.pca$rotation
knitr::kable(round(loadings.micra[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.nive <- species_pca_fun(loc.clim, "niveaphasma")
plot_clim_pca(summary.list.nive$loc.clim, summary.list.nive$summary.pca)
summary.list.nive <- species_pca_fun(loc.clim, "niveaphasma")
nive_plot <- plot_clim_pca(summary.list.nive$loc.clim, summary.list.nive$summary.pca)
nive_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(nive_plot, paste0(getwd(), "/plots/repro_mode_plots/niveaphasma_pca.html"), selfcontained = TRUE)
summary.list.nive$summary.pca
loadings.nive <- summary.list.nive$summary.pca$rotation
knitr::kable(round(loadings.nive[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.spin <- species_pca_fun(loc.clim, "spinotectarchus")
spin_plot <- plot_clim_pca(summary.list.spin$loc.clim, summary.list.spin$summary.pca, factor = "reproductive_mode")
spin_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(spin_plot, paste0(getwd(), "/plots/repro_mode_plots/spinotectarchus_pca.html"), selfcontained = TRUE)
summary.list.spin$summary.pca
loadings.spin <- summary.list.spin$summary.pca$rotation
knitr::kable(round(loadings.spin[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.tect <- species_pca_fun(loc.clim, "tectarchus")
tect_plot <- plot_clim_pca(summary.list.tect$loc.clim, summary.list.tect$summary.pca, factor = "reproductive_mode")
tect_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(tect_plot, paste0(getwd(), "/plots/repro_mode_plots/tectarchus_pca.html"), selfcontained = TRUE)
summary.list.tect$summary.pca
loadings.tect <- summary.list.tect$summary.pca$rotation
knitr::kable(round(loadings.tect[,1:3],3)) #Table of loading scores for the first 3 PCs.
acan_plot
summary.list.acan
acan_locs <- locs %>%
filter(genus == "acanthoxyla")
acan_loc <- loc %>%
filter(genus == "acanthoxyla")
#use sourced plot_locs_leaflet script to plot localities
acan_map <- plot_locs_leaflet(acan_loc, "reproductive_mode")
acan_map
#in case I want to save the map somewhere
mapview::mapshot(acan_map, url = paste0(getwd(), "/plots/repro_mode_plots/acan_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/acan_map.pdf"))
#source function to conduct a PCA on individual species
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
#plot
acan_plot <- plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca, "reproductive_mode")
acan_plot
#save pca plot
#htmlwidgets::saveWidget(acan_plot, paste0(getwd(), "/plots/repro_mode_plots/acanthoxyla_pca.html"), selfcontained = TRUE)
acan_loc <- loc %>%
filter(genus == "acanthoxyla")
#use sourced plot_locs_leaflet script to plot localities
acan_map <- plot_locs_leaflet(acan_loc, "reproductive_mode")
acan_map
#in case I want to save the map somewhere
#mapview::mapshot(acan_map, url = paste0(getwd(), "/plots/repro_mode_plots/acan_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/acan_map.pdf"))
#conduct pca
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
#plot
argo_plot <- plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca, factor = "reproductive_mode")
argo_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(argo_plot, paste0(getwd(), "/plots/repro_mode_plots/argosarchus_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
argo_loc <- loc %>%
filter(genus == "argosarchus")
#use sourced plot_locs_leaflet script to plot localities
argo_map <- plot_locs_leaflet(argo_loc, "reproductive_mode")
argo_map
#in case I want to save the map somewhere
mapview::mapshot(argo_map, url = paste0(getwd(), "/plots/repro_mode_plots/argo_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/argo_map.pdf"))
#pca
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
#plot
aste_plot <- plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca, factor = "reproductive_mode")
aste_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(aste_plot, paste0(getwd(), "/plots/repro_mode_plots/asteliaphasma_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
aste_loc <- loc %>%
filter(genus == "asteliophasma")
#use sourced plot_locs_leaflet script to plot localities
aste_map <- plot_locs_leaflet(aste_loc, "reproductive_mode")
aste_map
#in case I want to save the map somewhere
mapview::mapshot(aste_map, url = paste0(getwd(), "/plots/repro_mode_plots/aste_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/aste_map.pdf"))
aste_map
#pca
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
#plot
aste_plot <- plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca, factor = "reproductive_mode")
aste_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(aste_plot, paste0(getwd(), "/plots/repro_mode_plots/asteliaphasma_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
aste_loc <- loc %>%
filter(genus == "asteliophasma")
#use sourced plot_locs_leaflet script to plot localities
aste_map <- plot_locs_leaflet(aste_loc, "reproductive_mode")
aste_map
#in case I want to save the map somewhere
#mapview::mapshot(aste_map, url = paste0(getwd(), "/plots/repro_mode_plots/aste_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/aste_map.pdf"))
aste_map
aste_loc
loc
unique(loc$genus)
#pca
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
#plot
aste_plot <- plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca, factor = "reproductive_mode")
aste_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(aste_plot, paste0(getwd(), "/plots/repro_mode_plots/asteliaphasma_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
aste_loc <- loc %>%
filter(genus == "asteliaphasma")
#use sourced plot_locs_leaflet script to plot localities
aste_map <- plot_locs_leaflet(aste_loc, "reproductive_mode")
aste_map
#in case I want to save the map somewhere
mapview::mapshot(aste_map, url = paste0(getwd(), "/plots/repro_mode_plots/aste_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/aste_map.pdf"))
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
clita_plot <- plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca, factor = "reproductive_mode")
clita_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(clita_plot, paste0(getwd(), "/plots/repro_mode_plots/clitarchus_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
clita_loc <- loc %>%
filter(genus == "clitarchus")
#use sourced plot_locs_leaflet script to plot localities
clita_map <- plot_locs_leaflet(clita_loc, "reproductive_mode")
clita_map
#in case I want to save the map somewhere
mapview::mapshot(clita_map, url = pclita0(getwd(), "/plots/repro_mode_plots/clita_map.html"), file = pclita0(getwd(), "/plots/repro_mode_plots/clita_map.pdf"))
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
clita_plot <- plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca, factor = "reproductive_mode")
clita_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(clita_plot, paste0(getwd(), "/plots/repro_mode_plots/clitarchus_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
clita_loc <- loc %>%
filter(genus == "clitarchus")
#use sourced plot_locs_leaflet script to plot localities
clita_map <- plot_locs_leaflet(clita_loc, "reproductive_mode")
clita_map
#in case I want to save the map somewhere
mapview::mapshot(clita_map, url = pclita0(getwd(), "/plots/repro_mode_plots/clita_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/clita_map.pdf"))
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
clita_plot <- plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca, factor = "reproductive_mode")
clita_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(clita_plot, paste0(getwd(), "/plots/repro_mode_plots/clitarchus_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
clita_loc <- loc %>%
filter(genus == "clitarchus")
#use sourced plot_locs_leaflet script to plot localities
clita_map <- plot_locs_leaflet(clita_loc, "reproductive_mode")
clita_map
#in case I want to save the map somewhere
mapview::mapshot(clita_map, url = paste0(getwd(), "/plots/repro_mode_plots/clita_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/clita_map.pdf"))
summary.list.micra <- species_pca_fun(loc.clim, "micrarchus")
micra_plot <- plot_clim_pca(summary.list.micra$loc.clim, summary.list.micra$summary.pca, factor = "reproductive_mode")
micra_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(micra_plot, paste0(getwd(), "/plots/repro_mode_plots/micrarchus_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
micra_loc <- loc %>%
filter(genus == "micrarchus")
#use sourced plot_locs_leaflet script to plot localities
micra_map <- plot_locs_leaflet(micra_loc, "reproductive_mode")
micra_map
#in case I want to save the map somewhere
mapview::mapshot(micra_map, url = paste0(getwd(), "/plots/repro_mode_plots/micra_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/micra_map.pdf"))
summary.list.nive <- species_pca_fun(loc.clim, "niveaphasma")
nive_plot <- plot_clim_pca(summary.list.nive$loc.clim, summary.list.nive$summary.pca)
nive_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(nive_plot, paste0(getwd(), "/plots/repro_mode_plots/niveaphasma_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
nive_loc <- loc %>%
filter(genus == "niveaphasma")
#use sourced plot_locs_leaflet script to plot localities
nive_map <- plot_locs_leaflet(nive_loc, "reproductive_mode")
nive_map
#in case I want to save the map somewhere
mapview::mapshot(nive_map, url = paste0(getwd(), "/plots/repro_mode_plots/nive_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/nive_map.pdf"))
nive_plot
summary.list.nive <- species_pca_fun(loc.clim, "niveaphasma")
nive_plot <- plot_clim_pca(summary.list.nive$loc.clim, summary.list.nive$summary.pca, factor = "reproductive_mode")
nive_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
htmlwidgets::saveWidget(nive_plot, paste0(getwd(), "/plots/repro_mode_plots/niveaphasma_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
nive_loc <- loc %>%
filter(genus == "niveaphasma")
#use sourced plot_locs_leaflet script to plot localities
nive_map <- plot_locs_leaflet(nive_loc, "reproductive_mode")
nive_map
#in case I want to save the map somewhere
mapview::mapshot(nive_map, url = paste0(getwd(), "/plots/repro_mode_plots/nive_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/nive_map.pdf"))
summary.list.spin <- species_pca_fun(loc.clim, "spinotectarchus")
spin_plot <- plot_clim_pca(summary.list.spin$loc.clim, summary.list.spin$summary.pca, factor = "reproductive_mode")
spin_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(spin_plot, paste0(getwd(), "/plots/repro_mode_plots/spinotectarchus_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
spin_loc <- loc %>%
filter(genus == "spinotectarchus")
#use sourced plot_locs_leaflet script to plot localities
spin_map <- plot_locs_leaflet(spin_loc, "reproductive_mode")
spin_map
#in case I want to save the map somewhere
mapview::mapshot(spin_map, url = paste0(getwd(), "/plots/repro_mode_plots/spin_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/spin_map.pdf"))
summary.list.tect <- species_pca_fun(loc.clim, "tectarchus")
tect_plot <- plot_clim_pca(summary.list.tect$loc.clim, summary.list.tect$summary.pca, factor = "reproductive_mode")
tect_plot
#if selfcontained = TRUE, you can remove the folder that gets added alongside the plot. It's an annoying bug that hasn't been fixed yet.
#htmlwidgets::saveWidget(tect_plot, paste0(getwd(), "/plots/repro_mode_plots/tectarchus_pca.html"), selfcontained = TRUE)
#filter localities for the focal genus
tect_loc <- loc %>%
filter(genus == "tectarchus")
#use sourced plot_locs_leaflet script to plot localities
tect_map <- plot_locs_leaflet(tect_loc, "reproductive_mode")
tect_map
#in case I want to save the map somewhere
mapview::mapshot(tect_map, url = paste0(getwd(), "/plots/repro_mode_plots/tect_map.html"), file = paste0(getwd(), "/plots/repro_mode_plots/tect_map.pdf"))
