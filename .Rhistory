source("R/plot_leaflet_function.R") #source locality plotting function
source("R/plot_climate_pca_function.R") #source pca plotting function
source("R/species_pca_function.R") #source function that computes climate pca per species
###read in spreadsheet
loc <- fread("worksheets/all-species.csv") %>% filter(latitude > -1000)
#make locality shape file and assign WGS coord system
coord.points <- st_as_sf(loc, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
all_plot <- plot_locs_leaflet(loc)
all_plot
##get worldclim data
w <- getData("worldclim", var = "bio", res = 0.5, lon = 173, lat = -35)
#check it out
plot(w,1, xlim = c(165, 185), ylim= c(-55, -33))
#extract data from worldclim for each locality. Making this into a data frame with columns labeled so the row labeling lines up after I remove the NAs.
#extract data from worldclim for each locality.
coords <- data.frame(latitude = loc$longitude, longitude = loc$latitude)
loc.clim <- dplyr::bind_cols(loc, raster::extract(w, coords, method = "simple", df = TRUE)) %>%
na.omit() %>%
select(-ID)
#make a matrix of only bioclim values
clim.mat <- loc.clim[,grep("bio", names(loc.clim))] %>% as.matrix()
#run pca on climate variables
clim.pca <- prcomp(clim.mat, scale = TRUE)
summary.pca <- summary(clim.pca) #check out the components
#add pca results to loc.clim data frame
loc.clim <- data.frame(loc.clim, clim.pca$x)
plot_clim_pca(loc.clim, summary.pca)
summary.pca
knitr::kable(round(clim.pca$rotation[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca)
summary.list.acan$summary.pca
loadings.acan <- summary.list.acan$summary.pca$rotation
knitr::kable(round(loadings.acan[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca)
source("R/plot_climate_pca_function.R") #source pca plotting function
#add pca results to loc.clim data frame
loc.clim <- data.frame(loc.clim, clim.pca$x)
plot_clim_pca(loc.clim, summary.pca)
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca)
summary.list.acan$summary.pca
loadings.acan <- summary.list.acan$summary.pca$rotation
knitr::kable(round(loadings.acan[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca)
summary.list.argo$summary.pca
loadings.argo <- summary.list.argo$summary.pca$rotation
knitr::kable(round(loadings.argo[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca)
summary.list.aste$summary.pca
loadings.aste <- summary.list.aste$summary.pca$rotation
knitr::kable(round(loadings.aste[,1:3],3)) #Table of loading scores for the first 3 PCs.
source("R/min_convex_poly.R") #source function that creates a minimum convex polygon around points
?getData
?spread
source("R/omi_function.R") #source function that conducts an omi analysis
View(omi_fun)
aste_omi <- omi_fun(summary.list.aste$loc.clim, w)
aste_omi$test_omi
aste_omi$pca_omi
aste_omi$data_omi
??kable
knitr::kable(aste_omi$test_omi)
aste_omi$test_omi$obs
aste_omi$test_omi$rep
aste_omi$test_omi$ntest
aste_omi$test_omi$pvalue
aste_omi$test_omi$expvar
aste_omi$test_omi$plot
aste_omi$test_omi$call
?krandtest
aste_omi$test_omi$adj.pvalue
aste_omi$omi
aste_omi$omi$tab
source("R/omi_function.R") #source function that conducts an omi analysis
aste_omi <- omi_fun(summary.list.aste$loc.clim, w)
aste_omi$omi
aste_omi$test_omi
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca)
summary.list.clita$summary.pca
loadings.clita <- summary.list.clita$summary.pca$rotation
knitr::kable(round(loadings.clita[,1:3],3)) #Table of loading scores for the first 3 PCs.
clita_omi <- omi_fun(summary.list.clita$loc.clim, w)
clita_omi$test_omi
plot(clita_omi$omi)
summary.list.micra <- species_pca_fun(loc.clim, "micrarchus")
plot_clim_pca(summary.list.micra$loc.clim, summary.list.micra$summary.pca)
summary.list.micra$summary.pca
loadings.micra <- summary.list.micra$summary.pca$rotation
knitr::kable(round(loadings.micra[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.nive <- species_pca_fun(loc.clim, "niveaphasma")
plot_clim_pca(summary.list.nive$loc.clim, summary.list.nive$summary.pca)
summary.list.nive$summary.pca
loadings.nive <- summary.list.nive$summary.pca$rotation
knitr::kable(round(loadings.nive[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.spin <- species_pca_fun(loc.clim, "spinotectarchus")
plot_clim_pca(summary.list.spin$loc.clim, summary.list.spin$summary.pca)
summary.list.spin$summary.pca
loadings.spin <- summary.list.spin$summary.pca$rotation
knitr::kable(round(loadings.spin[,1:3],3)) #Table of loading scores for the first 3 PCs.
spin_omi <- omi_fun(summary.list.spin$loc.clim, w)
spin_omi$test_omi
plot(spin_omi$omi)
?if_else
source("R/omi_function.R") #source function that conducts an omi analysis
aste_omi <- omi_fun(summary.list.aste$loc.clim, w, use_bg = TRUE)
?if
()
source("R/omi_function.R") #source function that conducts an omi analysis
aste_omi <- omi_fun(summary.list.aste$loc.clim, w, use_bg = TRUE)
aste_omi$test_omi
aste_omi <- omi_fun(summary.list.aste$loc.clim, w, use_bg = FALSE)
aste_omi$test_omi
summary(aste_omi$data_omi)
summary(aste_omi$data_omi)aste_omi$data_omi$species
aste_omi$data_omi$species
?drop_na
source("R/omi_function.R") #source function that conducts an omi analysis
aste_omi <- omi_fun(summary.list.aste$loc.clim, w, use_bg = FALSE)
aste_omi$test_omi
all_omi <- omi_fun(loc.clim, w, use_bg = FALSE)
all_omi$test_omi
?rtest
?rtest.niche
plot(all_omi$omi)
?niche
all_omi$omi$tab
all_omi$omi$rank
all_omi$omi$eig
all_omi$omi$ll
all_omi$omi$Il
all_omi$omi$l1
source("R/omi_function.R") #source function that conducts an omi analysis
aste_omi <- omi_fun(summary.list.aste$loc.clim, w, use_bg = FALSE, numrep = 1000)
aste_omi$test_omi
source("R/omi_function.R") #source function that conducts an omi analysis
clita_omi <- omi_fun(summary.list.clita$loc.clim, w, use_bg = FALSE)
clita_omi <- omi_fun(summary.list.clita$loc.clim, w, use_bg = FALSE)
clita_omi$test_omi
packages <- c("raster", "data.table", "tidyverse", "sf", "RStoolbox", "leaflet", "plotly", "gdata", "BSDA", "ade4", "tidylog") #RStoolbox has some dependencies like openMP that can be difficult to compile on a Mac (needed for the dependent package "caret"). If you have High Sierra OS or newer, search for instructions specific to your OS- it's a lot easier than older OS's.
lapply(packages, require, character.only = TRUE)
source("R/plot_leaflet_function.R") #source locality plotting function
source("R/plot_climate_pca_function.R") #source pca plotting function
source("R/species_pca_function.R") #source function that computes climate pca per species
source("R/min_convex_poly.R") #source function that creates a minimum convex polygon around points
source("R/omi_function.R") #source function that conducts an omi analysis
###read in spreadsheet
loc <- fread("worksheets/all-species.csv") %>% filter(latitude > -1000)
#make locality shape file and assign WGS coord system
coord.points <- st_as_sf(loc, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
all_plot <- plot_locs_leaflet(loc)
all_plot
##get worldclim data
w <- getData("worldclim", var = "bio", res = 0.5, lon = 173, lat = -35)
#check it out
plot(w,1, xlim = c(165, 185), ylim= c(-55, -33))
#extract data from worldclim for each locality. Making this into a data frame with columns labeled so the row labeling lines up after I remove the NAs.
#extract data from worldclim for each locality.
coords <- data.frame(latitude = loc$longitude, longitude = loc$latitude)
loc.clim <- dplyr::bind_cols(loc, raster::extract(w, coords, method = "simple", df = TRUE)) %>%
na.omit() %>%
select(-ID)
#make a matrix of only bioclim values
clim.mat <- loc.clim[,grep("bio", names(loc.clim))] %>% as.matrix()
#run pca on climate variables
clim.pca <- prcomp(clim.mat, scale = TRUE)
summary.pca <- summary(clim.pca) #check out the components
#add pca results to loc.clim data frame
loc.clim <- data.frame(loc.clim, clim.pca$x)
plot_clim_pca(loc.clim, summary.pca)
summary.pca
knitr::kable(round(clim.pca$rotation[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca)
summary.list.acan$summary.pca
loadings.acan <- summary.list.acan$summary.pca$rotation
knitr::kable(round(loadings.acan[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca)
summary.list.argo$summary.pca
loadings.argo <- summary.list.argo$summary.pca$rotation
knitr::kable(round(loadings.argo[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca)
summary.list.aste$summary.pca
loadings.aste <- summary.list.aste$summary.pca$rotation
knitr::kable(round(loadings.aste[,1:3],3)) #Table of loading scores for the first 3 PCs.
aste_omi <- omi_fun(summary.list.aste$loc.clim, w, use_bg = FALSE)
aste_omi$test_omi
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca)
summary.list.clita$summary.pca
loadings.clita <- summary.list.clita$summary.pca$rotation
knitr::kable(round(loadings.clita[,1:3],3)) #Table of loading scores for the first 3 PCs.
clita_omi <- omi_fun(summary.list.clita$loc.clim, w, use_bg = FALSE)
clita_omi$test_omi
packages <- c("raster", "data.table", "tidyverse", "sf", "RStoolbox", "leaflet", "plotly", "gdata", "BSDA", "ade4", "tidylog") #RStoolbox has some dependencies like openMP that can be difficult to compile on a Mac (needed for the dependent package "caret"). If you have High Sierra OS or newer, search for instructions specific to your OS- it's a lot easier than older OS's.
lapply(packages, require, character.only = TRUE)
source("R/plot_leaflet_function.R") #source locality plotting function
source("R/plot_climate_pca_function.R") #source pca plotting function
source("R/species_pca_function.R") #source function that computes climate pca per species
source("R/min_convex_poly.R") #source function that creates a minimum convex polygon around points
source("R/omi_function.R") #source function that conducts an omi analysis
###read in spreadsheet
loc <- fread("worksheets/all-species.csv") %>% filter(latitude > -1000)
#make locality shape file and assign WGS coord system
coord.points <- st_as_sf(loc, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
#use sourced plot_locs_leaflet script to plot localities
all_plot <- plot_locs_leaflet(loc)
all_plot
##get worldclim data
w <- getData("worldclim", var = "bio", res = 0.5, lon = 173, lat = -35)
#check it out
plot(w,1, xlim = c(165, 185), ylim= c(-55, -33))
#extract data from worldclim for each locality. Making this into a data frame with columns labeled so the row labeling lines up after I remove the NAs.
#extract data from worldclim for each locality.
coords <- data.frame(latitude = loc$longitude, longitude = loc$latitude)
loc.clim <- dplyr::bind_cols(loc, raster::extract(w, coords, method = "simple", df = TRUE)) %>%
na.omit() %>%
select(-ID)
#make a matrix of only bioclim values
clim.mat <- loc.clim[,grep("bio", names(loc.clim))] %>% as.matrix()
#run pca on climate variables
clim.pca <- prcomp(clim.mat, scale = TRUE)
summary.pca <- summary(clim.pca) #check out the components
#plot tables
summary.pca
knitr::kable(round(clim.pca$rotation[,1:3],3)) #Table of loading scores for the first 3 PCs.
#source function to conduct a PCA on individual species
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
#plot
plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca)
summary.list.acan$summary.pca
loadings.acan <- summary.list.acan$summary.pca$rotation
knitr::kable(round(loadings.acan[,1:3],3)) #Table of loading scores for the first 3 PCs.
#conduct pca
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
#plot
plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca)
summary.list.argo$summary.pca
loadings.argo <- summary.list.argo$summary.pca$rotation
knitr::kable(round(loadings.argo[,1:3],3)) #Table of loading scores for the first 3 PCs.
#pca
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
#plot
plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca)
summary.list.aste$summary.pca
loadings.aste <- summary.list.aste$summary.pca$rotation
knitr::kable(round(loadings.aste[,1:3],3)) #Table of loading scores for the first 3 PCs.
source("R/pc_centroid_fun.R")
#calculate the centroid of a random sample of individuals. df = data frame, sp = string containing the species you are interested (e.g. "naomi"), len = the number of individuals to sample. Should be the number of individuals from the species that has fewer occurrences.
#calculate the centroid from the range-restricted species.
pc.centroid.nov <- loc.clim.aste %>%
filter(species == "nov. sp.") %>%
select(PC1.1:PC3.1) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#calculate the centroid of a random sample of individuals. df = data frame, sp = string containing the species you are interested (e.g. "naomi"), len = the number of individuals to sample. Should be the number of individuals from the species that has fewer occurrences.
#calculate the centroid from the range-restricted species.
pc.centroid.nov <- summary.list.aste$loc.clim %>%
filter(species == "nov. sp.") %>%
select(PC1.1:PC3.1) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#calculate the centroid of a random sample of individuals. df = data frame, sp = string containing the species you are interested (e.g. "naomi"), len = the number of individuals to sample. Should be the number of individuals from the species that has fewer occurrences.
#calculate the centroid from the range-restricted species.
pc.centroid.nov <- summary.list.aste$loc.clim %>%
filter(species == "nov. sp.") %>%
select(PC1:PC3) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#resample the more widespread species many times, calculating the centroid of three individuals (number of individuals in the range-restricted species)
pc.centroid.naomi <- replicate(1000, pc.centroid.fun(summary.list.aste$loc.clim, "naomi", 3), simplify = TRUE) %>%
as.data.frame()
#calculate the centroid of a random sample of individuals. df = data frame, sp = string containing the species you are interested (e.g. "naomi"), len = the number of individuals to sample. Should be the number of individuals from the species that has fewer occurrences.
#calculate the centroid from the range-restricted species.
pc.centroid.nov <- summary.list.aste$loc.clim %>%
filter(species == "nov. sp.") %>%
select(PC1:PC3) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#resample the more widespread species many times, calculating the centroid of three individuals (number of individuals in the range-restricted species)
pc.centroid.naomi <- replicate(1000, pc_centroid_fun(summary.list.aste$loc.clim, "naomi", 3), simplify = TRUE) %>%
as.data.frame()
source("R/pc_centroid_fun.R")
#calculate the centroid of a random sample of individuals. df = data frame, sp = string containing the species you are interested (e.g. "naomi"), len = the number of individuals to sample. Should be the number of individuals from the species that has fewer occurrences.
#calculate the centroid from the range-restricted species.
pc.centroid.nov <- summary.list.aste$loc.clim %>%
filter(species == "nov. sp.") %>%
select(PC1:PC3) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#resample the more widespread species many times, calculating the centroid of three individuals (number of individuals in the range-restricted species)
pc.centroid.naomi <- replicate(1000, pc_centroid_fun(summary.list.aste$loc.clim, "naomi", 3), simplify = TRUE) %>%
as.data.frame()
names(pc.centroid.naomi) <- "centroid" #needs to be a data frame with a named column for ggplot
#sampling distribution of the centroids calculated from the generalist species. The red line indicates the centroid of the range-restricted species
ggplot(pc.centroid.naomi, aes(x = centroid)) +
geom_histogram(bins = 30) +
#scale_x_sqrt() +
geom_vline(xintercept = pc.centroid.nov, color = "red") +
theme_linedraw()
packages <- c("raster", "data.table", "tidyverse", "sf", "RStoolbox", "leaflet", "plotly", "gdata", "BSDA", "ade4") #RStoolbox has some dependencies like openMP that can be difficult to compile on a Mac (needed for the dependent package "caret"). If you have High Sierra OS or newer, search for instructions specific to your OS- it's a lot easier than older OS's.
lapply(packages, require, character.only = TRUE)
source("R/plot_leaflet_function.R") #source locality plotting function
source("R/plot_climate_pca_function.R") #source pca plotting function
source("R/species_pca_function.R") #source function that computes climate pca per species
source("R/min_convex_poly.R") #source function that creates a minimum convex polygon around points
source("R/pc_centroid_fun.R") #source function for my version of assessing marginal niche hypothesis
source("R/omi_function.R") #source function that conducts an omi analysis
###read in spreadsheet
loc <- fread("worksheets/all-species.csv") %>% filter(latitude > -1000)
#make locality shape file and assign WGS coord system
coord.points <- st_as_sf(loc, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
#use sourced plot_locs_leaflet script to plot localities
all_plot <- plot_locs_leaflet(loc)
all_plot
##get worldclim data
w <- getData("worldclim", var = "bio", res = 0.5, lon = 173, lat = -35)
#check it out
plot(w,1, xlim = c(165, 185), ylim= c(-55, -33))
#extract data from worldclim for each locality. Making this into a data frame with columns labeled so the row labeling lines up after I remove the NAs.
#extract data from worldclim for each locality.
coords <- data.frame(latitude = loc$longitude, longitude = loc$latitude)
loc.clim <- dplyr::bind_cols(loc, raster::extract(w, coords, method = "simple", df = TRUE)) %>%
na.omit() %>%
select(-ID)
#make a matrix of only bioclim values
clim.mat <- loc.clim[,grep("bio", names(loc.clim))] %>% as.matrix()
#run pca on climate variables
clim.pca <- prcomp(clim.mat, scale = TRUE)
summary.pca <- summary(clim.pca) #check out the components
#add pca results to loc.clim data frame
loc.clim <- data.frame(loc.clim, clim.pca$x)
#use sourced plot_clim_pca function to plot the pca results. args are the data set with species names and PC axis values and the pca summary
plot_clim_pca(loc.clim, summary.pca)
#plot tables
summary.pca
knitr::kable(round(clim.pca$rotation[,1:3],3)) #Table of loading scores for the first 3 PCs.
#source function to conduct a PCA on individual species
summary.list.acan <- species_pca_fun(loc.clim, "acanthoxyla")
#plot
plot_clim_pca(summary.list.acan$loc.clim, summary.list.acan$summary.pca)
summary.list.acan$summary.pca
loadings.acan <- summary.list.acan$summary.pca$rotation
knitr::kable(round(loadings.acan[,1:3],3)) #Table of loading scores for the first 3 PCs.
#conduct pca
summary.list.argo <- species_pca_fun(loc.clim, "argosarchus")
#plot
plot_clim_pca(summary.list.argo$loc.clim, summary.list.argo$summary.pca)
summary.list.argo$summary.pca
loadings.argo <- summary.list.argo$summary.pca$rotation
knitr::kable(round(loadings.argo[,1:3],3)) #Table of loading scores for the first 3 PCs.
#pca
summary.list.aste <- species_pca_fun(loc.clim, "asteliaphasma")
#plot
plot_clim_pca(summary.list.aste$loc.clim, summary.list.aste$summary.pca)
summary.list.aste$summary.pca
loadings.aste <- summary.list.aste$summary.pca$rotation
knitr::kable(round(loadings.aste[,1:3],3)) #Table of loading scores for the first 3 PCs.
#calculate the centroid of a random sample of individuals. df = data frame, sp = string containing the species you are interested (e.g. "naomi"), len = the number of individuals to sample. Should be the number of individuals from the species that has fewer occurrences.
#calculate the centroid from the range-restricted species.
pc.centroid.nov <- summary.list.aste$loc.clim %>%
filter(species == "nov. sp.") %>%
select(PC1:PC3) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#resample the more widespread species many times, calculating the centroid of three individuals (number of individuals in the range-restricted species)
pc.centroid.naomi <- replicate(1000, pc_centroid_fun(summary.list.aste$loc.clim, "naomi", 3), simplify = TRUE) %>%
as.data.frame()
names(pc.centroid.naomi) <- "centroid" #needs to be a data frame with a named column for ggplot
#sampling distribution of the centroids calculated from the generalist species. The red line indicates the centroid of the range-restricted species
ggplot(pc.centroid.naomi, aes(x = centroid)) +
geom_histogram(bins = 30) +
#scale_x_sqrt() +
geom_vline(xintercept = pc.centroid.nov, color = "red") +
theme_linedraw()
source("R/pc_centroid_fun.R") #source function for my version of assessing marginal niche hypothesis
#calculate the centroid of a random sample of individuals. df = data frame, sp = string containing the species you are interested (e.g. "naomi"), len = the number of individuals to sample. Should be the number of individuals from the species that has fewer occurrences.
#calculate the centroid from the range-restricted species.
pc.centroid.nov <- summary.list.aste$loc.clim %>%
filter(species == "nov. sp.") %>%
select(PC1.1:PC3.1) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#resample the more widespread species many times, calculating the centroid of three individuals (number of individuals in the range-restricted species)
pc.centroid.naomi <- replicate(1000, pc_centroid_fun(summary.list.aste$loc.clim, "naomi", 3), simplify = TRUE) %>%
as.data.frame()
names(pc.centroid.naomi) <- "centroid" #needs to be a data frame with a named column for ggplot
#sampling distribution of the centroids calculated from the generalist species. The red line indicates the centroid of the range-restricted species
ggplot(pc.centroid.naomi, aes(x = centroid)) +
geom_histogram(bins = 30) +
#scale_x_sqrt() +
geom_vline(xintercept = pc.centroid.nov, color = "red") +
theme_linedraw()
aste_omi <- omi_fun(summary.list.aste$loc.clim, w, use_bg = FALSE)
aste_omi$test_omi
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca)
summary.list.clita <- species_pca_fun(loc.clim, "clitarchus")
plot_clim_pca(summary.list.clita$loc.clim, summary.list.clita$summary.pca)
summary.list.clita$summary.pca
loadings.clita <- summary.list.clita$summary.pca$rotation
knitr::kable(round(loadings.clita[,1:3],3)) #Table of loading scores for the first 3 PCs.
#calculate the centroid from the range-restricted species.
pc.centroid.tepaki <- loc.clim.clita %>%
filter(species == "tepaki") %>%
select(PC1.1:PC3.1) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
#calculate the centroid from the range-restricted species.
pc.centroid.tepaki <- summary.list.clita$loc.clim %>%
filter(species == "tepaki") %>%
select(PC1.1:PC3.1) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
pc.centroid.hookeri <- replicate(1000, pc.centroid.fun(summary.list.clita$loc.clim, "hookeri", 3), simplify = TRUE) %>%
as.data.frame()
#calculate the centroid from the range-restricted species.
pc.centroid.tepaki <- summary.list.clita$loc.clim %>%
filter(species == "tepaki") %>%
select(PC1.1:PC3.1) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
pc.centroid.hookeri <- replicate(1000, pc_centroid_fun(summary.list.clita$loc.clim, "hookeri", 3), simplify = TRUE) %>%
as.data.frame()
names(pc.centroid.hookeri) <- "centroid"
ggplot(pc.centroid.hookeri, aes(x = centroid)) +
geom_histogram(bins = 30) +
#scale_x_sqrt() +
geom_vline(xintercept = pc.centroid.tepaki, color = "red") +
theme_linedraw()
#length(pc.centroid.hookeri$centroid[pc.centroid.hookeri$centroid > pc.centroid.tepaki])
clita_omi <- omi_fun(summary.list.clita$loc.clim, w, use_bg = FALSE)
clita_omi$test_omi
summary.list.micra <- species_pca_fun(loc.clim, "micrarchus")
plot_clim_pca(summary.list.micra$loc.clim, summary.list.micra$summary.pca)
summary.list.micra$summary.pca
loadings.micra <- summary.list.micra$summary.pca$rotation
knitr::kable(round(loadings.micra[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.nive <- species_pca_fun(loc.clim, "niveaphasma")
plot_clim_pca(summary.list.nive$loc.clim, summary.list.nive$summary.pca)
summary.list.nive$summary.pca
loadings.nive <- summary.list.nive$summary.pca$rotation
knitr::kable(round(loadings.nive[,1:3],3)) #Table of loading scores for the first 3 PCs.
summary.list.spin <- species_pca_fun(loc.clim, "spinotectarchus")
plot_clim_pca(summary.list.spin$loc.clim, summary.list.spin$summary.pca)
summary.list.spin$summary.pca
loadings.spin <- summary.list.spin$summary.pca$rotation
knitr::kable(round(loadings.spin[,1:3],3)) #Table of loading scores for the first 3 PCs.
#calculate the centroid from the range-restricted species.
pc.centroid.acornutus_sub <- summary.list.spin$loc.clim %>%
filter(species == "acornutus_sub") %>%
select(PC1.1:PC3.1) %>%
summarize_all(mean) %>%
rowMeans() %>%
abs()
pc.centroid.acornutus <- replicate(1000, pc_centroid_fun(summary.list.spin$loc.clim, "acornutus", 3), simplify = TRUE) %>%
as.data.frame()
names(pc.centroid.acornutus) <- "centroid"
ggplot(pc.centroid.acornutus, aes(x = centroid)) +
geom_histogram(bins = 30) +
#scale_x_sqrt() +
geom_vline(xintercept = pc.centroid.acornutus_sub, color = "red") +
theme_linedraw()
spin_omi <- omi_fun(summary.list.spin$loc.clim, w, use_bg = FALSE)
spin_omi$test_omi
summary.list.tect <- species_pca_fun(loc.clim, "tectarchus")
plot_clim_pca(summary.list.tect$loc.clim, summary.list.tect$summary.pca)
summary.list.tect$summary.pca
loadings.tect <- summary.list.tect$summary.pca$rotation
knitr::kable(round(loadings.tect[,1:3],3)) #Table of loading scores for the first 3 PCs.
all_omi <- omi_fun(loc.clim, w, use_bg = FALSE)
all_omi$test_omi
all_omi$test_omi
source("R/omi_function.R") #source function that conducts an omi analysis
all_omi <- omi_fun(loc.clim, w, use_bg = FALSE)
source("R/omi_function.R") #source function that conducts an omi analysis
all_omi <- omi_fun(loc.clim, w, use_bg = FALSE)
w
r-test <- raster::extract(w, loc.clim)
?raster::extract
class(loc.clim)
loc.clim$latitude
l_try <- loc.clim
coordinates(l_try) <- ~ longitude + latitude
coordinates(l_try)
min(coordinates(l_try)[,1])
min(coordinates(l_try)[,2])
max(coordinates(l_try)[,2])
max(coordinates(l_try)[,1])
mean(coordinates(l_try)[,1])
median(coordinates(l_try)[,1])
source("R/omi_function.R") #source function that conducts an omi analysis
